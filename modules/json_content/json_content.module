<?php

/**
 * @file
 * Contains hook implementations for json_content.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\json_content\Menu\ViewJsonTask;

/**
 * Implements hook_toolbar().
 */
function json_content_toolbar_alter(array &$items) {
  // The front page redirects to admin/content and content is generally not
  // viewed outside of the API so this link makes no sense.
  unset($items['home']);
}

/**
 * Implements hook_entity_operation_alter().
 */
function json_content_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (isset($operations['edit'])) {
    // Add the title of the node to the Edit link so our tests have something to
    // target.
    $operations['edit']['attributes']['title'] = t('Edit @title', [
      '@title' => $entity->label(),
    ]);
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function json_content_local_tasks_alter(array &$local_tasks) {
  $entity_json = Drupal::config('lightning_api.settings')->get('entity_json');
  $media_url = Drupal::config('media.settings')->get('standalone_url');

  foreach (array_keys($local_tasks) as $id) {
    $matches = [];

    // JSON:API is not capable of showing specific revisions, so we need to
    // remove the Latest Revision tab if it exists. Once
    // https://www.drupal.org/project/jsonapi/issues/2795279 is resolved, we
    // should be able to provide a link to the latest revision.
    if (preg_match('/^content_moderation\.workflows\:(\S*)\.latest_version_tab$/', $id)) {
      unset($local_tasks[$id]);
    }
    // If standalone URLs are not enabled for media items, the "canonical" route
    // is actually the edit form, so don't modify the corresponding local task.
    elseif ($id === 'media.tasks:entity.media.canonical' && empty($media_url)) {
      continue;
    }
    // If there is a link to the canonical view of an entity, override it so
    // that it points to its JSON:API representation instead. The 'media.tasks:'
    // prefix accounts for the fact that Media module exposes the canonical
    // route conditionally based on a config switch, and therefore creates the
    // Edit and View tasks with a deriver (which is why it's prefixed).
    elseif (preg_match('/^(media\.tasks:)?entity\.(\S*)\.canonical$/', $id, $matches) && $entity_json) {
      $local_tasks[$id]['title'] = t('View JSON');
      $local_tasks[$id]['class'] = ViewJsonTask::class;
      $local_tasks[$id]['entity_type_id'] = $matches[2];
    }
  }
}
